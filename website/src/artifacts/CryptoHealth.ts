/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IHealth {
  export type PatientStruct = {
    name: PromiseOrValue<string>;
    surname: PromiseOrValue<string>;
    birthDate: PromiseOrValue<BigNumberish>;
    height: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
    bloodType: PromiseOrValue<BigNumberish>;
  };

  export type PatientStructOutput = [
    string,
    string,
    BigNumber,
    number,
    number,
    number
  ] & {
    name: string;
    surname: string;
    birthDate: BigNumber;
    height: number;
    weight: number;
    bloodType: number;
  };

  export type DiagnosisStruct = {
    code: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    date: PromiseOrValue<BigNumberish>;
    doctor: PromiseOrValue<string>;
  };

  export type DiagnosisStructOutput = [number, boolean, BigNumber, string] & {
    code: number;
    isActive: boolean;
    date: BigNumber;
    doctor: string;
  };
}

export interface CryptoHealthInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOCTOR_ROLE()": FunctionFragment;
    "addDiagnosisRecord(address,uint16,bool)": FunctionFragment;
    "addPatient(address,(string,string,uint64,uint16,uint16,uint8))": FunctionFragment;
    "deletePatient(address)": FunctionFragment;
    "getActiveDiagnoses(address)": FunctionFragment;
    "getDiagnosesHistory(address)": FunctionFragment;
    "getPatient(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePatient(address,(string,string,uint64,uint16,uint16,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "DOCTOR_ROLE"
      | "addDiagnosisRecord"
      | "addPatient"
      | "deletePatient"
      | "getActiveDiagnoses"
      | "getDiagnosesHistory"
      | "getPatient"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updatePatient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOCTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDiagnosisRecord",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPatient",
    values: [PromiseOrValue<string>, IHealth.PatientStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePatient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveDiagnoses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiagnosesHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePatient",
    values: [PromiseOrValue<string>, IHealth.PatientStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOCTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDiagnosisRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPatient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deletePatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveDiagnoses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiagnosesHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPatient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePatient",
    data: BytesLike
  ): Result;

  events: {
    "DiagnosisAdded(address,uint16)": EventFragment;
    "DiagnosisRecordAdded(address,uint16,bool,address)": EventFragment;
    "DiagnosisRemoved(address,uint16)": EventFragment;
    "PatientAdded(address,string,string,uint64)": EventFragment;
    "PatientDeleted(address)": EventFragment;
    "PatientUpdated(address,string,string,uint64)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiagnosisAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiagnosisRecordAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiagnosisRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface DiagnosisAddedEventObject {
  patient: string;
  code: number;
}
export type DiagnosisAddedEvent = TypedEvent<
  [string, number],
  DiagnosisAddedEventObject
>;

export type DiagnosisAddedEventFilter = TypedEventFilter<DiagnosisAddedEvent>;

export interface DiagnosisRecordAddedEventObject {
  patient: string;
  code: number;
  isActive: boolean;
  doctor: string;
}
export type DiagnosisRecordAddedEvent = TypedEvent<
  [string, number, boolean, string],
  DiagnosisRecordAddedEventObject
>;

export type DiagnosisRecordAddedEventFilter =
  TypedEventFilter<DiagnosisRecordAddedEvent>;

export interface DiagnosisRemovedEventObject {
  patient: string;
  code: number;
}
export type DiagnosisRemovedEvent = TypedEvent<
  [string, number],
  DiagnosisRemovedEventObject
>;

export type DiagnosisRemovedEventFilter =
  TypedEventFilter<DiagnosisRemovedEvent>;

export interface PatientAddedEventObject {
  patient: string;
  name: string;
  surname: string;
  birthDate: BigNumber;
}
export type PatientAddedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PatientAddedEventObject
>;

export type PatientAddedEventFilter = TypedEventFilter<PatientAddedEvent>;

export interface PatientDeletedEventObject {
  patient: string;
}
export type PatientDeletedEvent = TypedEvent<
  [string],
  PatientDeletedEventObject
>;

export type PatientDeletedEventFilter = TypedEventFilter<PatientDeletedEvent>;

export interface PatientUpdatedEventObject {
  patient: string;
  name: string;
  surname: string;
  birthDate: BigNumber;
}
export type PatientUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PatientUpdatedEventObject
>;

export type PatientUpdatedEventFilter = TypedEventFilter<PatientUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface CryptoHealth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CryptoHealthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOCTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addDiagnosisRecord(
      patient: PromiseOrValue<string>,
      diagnosisCode: PromiseOrValue<BigNumberish>,
      isDiagnosisActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePatient(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveDiagnoses(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getDiagnosesHistory(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IHealth.DiagnosisStructOutput[]]>;

    getPatient(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IHealth.PatientStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOCTOR_ROLE(overrides?: CallOverrides): Promise<string>;

  addDiagnosisRecord(
    patient: PromiseOrValue<string>,
    diagnosisCode: PromiseOrValue<BigNumberish>,
    isDiagnosisActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPatient(
    address_: PromiseOrValue<string>,
    patient: IHealth.PatientStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePatient(
    address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveDiagnoses(
    patient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  getDiagnosesHistory(
    patient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IHealth.DiagnosisStructOutput[]>;

  getPatient(
    patient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IHealth.PatientStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePatient(
    address_: PromiseOrValue<string>,
    patient: IHealth.PatientStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOCTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    addDiagnosisRecord(
      patient: PromiseOrValue<string>,
      diagnosisCode: PromiseOrValue<BigNumberish>,
      isDiagnosisActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePatient(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveDiagnoses(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    getDiagnosesHistory(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IHealth.DiagnosisStructOutput[]>;

    getPatient(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IHealth.PatientStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DiagnosisAdded(address,uint16)"(
      patient?: PromiseOrValue<string> | null,
      code?: null
    ): DiagnosisAddedEventFilter;
    DiagnosisAdded(
      patient?: PromiseOrValue<string> | null,
      code?: null
    ): DiagnosisAddedEventFilter;

    "DiagnosisRecordAdded(address,uint16,bool,address)"(
      patient?: PromiseOrValue<string> | null,
      code?: null,
      isActive?: null,
      doctor?: null
    ): DiagnosisRecordAddedEventFilter;
    DiagnosisRecordAdded(
      patient?: PromiseOrValue<string> | null,
      code?: null,
      isActive?: null,
      doctor?: null
    ): DiagnosisRecordAddedEventFilter;

    "DiagnosisRemoved(address,uint16)"(
      patient?: PromiseOrValue<string> | null,
      code?: null
    ): DiagnosisRemovedEventFilter;
    DiagnosisRemoved(
      patient?: PromiseOrValue<string> | null,
      code?: null
    ): DiagnosisRemovedEventFilter;

    "PatientAdded(address,string,string,uint64)"(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      surname?: null,
      birthDate?: null
    ): PatientAddedEventFilter;
    PatientAdded(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      surname?: null,
      birthDate?: null
    ): PatientAddedEventFilter;

    "PatientDeleted(address)"(
      patient?: PromiseOrValue<string> | null
    ): PatientDeletedEventFilter;
    PatientDeleted(
      patient?: PromiseOrValue<string> | null
    ): PatientDeletedEventFilter;

    "PatientUpdated(address,string,string,uint64)"(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      surname?: null,
      birthDate?: null
    ): PatientUpdatedEventFilter;
    PatientUpdated(
      patient?: PromiseOrValue<string> | null,
      name?: null,
      surname?: null,
      birthDate?: null
    ): PatientUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOCTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addDiagnosisRecord(
      patient: PromiseOrValue<string>,
      diagnosisCode: PromiseOrValue<BigNumberish>,
      isDiagnosisActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePatient(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveDiagnoses(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiagnosesHistory(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPatient(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOCTOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDiagnosisRecord(
      patient: PromiseOrValue<string>,
      diagnosisCode: PromiseOrValue<BigNumberish>,
      isDiagnosisActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePatient(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveDiagnoses(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDiagnosesHistory(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPatient(
      patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePatient(
      address_: PromiseOrValue<string>,
      patient: IHealth.PatientStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
